// Code generated by MockGen. DO NOT EDIT.
// Source: kero_repository.go
//
// Generated by this command:
//
//	mockgen -source=kero_repository.go -destination=../../internal/test/mock/kero_repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/kaerubo/pond/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockKeroSaver is a mock of KeroSaver interface.
type MockKeroSaver struct {
	ctrl     *gomock.Controller
	recorder *MockKeroSaverMockRecorder
	isgomock struct{}
}

// MockKeroSaverMockRecorder is the mock recorder for MockKeroSaver.
type MockKeroSaverMockRecorder struct {
	mock *MockKeroSaver
}

// NewMockKeroSaver creates a new mock instance.
func NewMockKeroSaver(ctrl *gomock.Controller) *MockKeroSaver {
	mock := &MockKeroSaver{ctrl: ctrl}
	mock.recorder = &MockKeroSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeroSaver) EXPECT() *MockKeroSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockKeroSaver) Save(ctx context.Context, k *entity.Kero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, k)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockKeroSaverMockRecorder) Save(ctx, k any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockKeroSaver)(nil).Save), ctx, k)
}

// MockKeroFinder is a mock of KeroFinder interface.
type MockKeroFinder struct {
	ctrl     *gomock.Controller
	recorder *MockKeroFinderMockRecorder
	isgomock struct{}
}

// MockKeroFinderMockRecorder is the mock recorder for MockKeroFinder.
type MockKeroFinderMockRecorder struct {
	mock *MockKeroFinder
}

// NewMockKeroFinder creates a new mock instance.
func NewMockKeroFinder(ctrl *gomock.Controller) *MockKeroFinder {
	mock := &MockKeroFinder{ctrl: ctrl}
	mock.recorder = &MockKeroFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeroFinder) EXPECT() *MockKeroFinderMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockKeroFinder) FindAll(ctx context.Context) ([]*entity.Kero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*entity.Kero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockKeroFinderMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockKeroFinder)(nil).FindAll), ctx)
}

// FindByID mocks base method.
func (m *MockKeroFinder) FindByID(ctx context.Context, id int64) (*entity.Kero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.Kero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockKeroFinderMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockKeroFinder)(nil).FindByID), ctx, id)
}

// MockKeroUpdater is a mock of KeroUpdater interface.
type MockKeroUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockKeroUpdaterMockRecorder
	isgomock struct{}
}

// MockKeroUpdaterMockRecorder is the mock recorder for MockKeroUpdater.
type MockKeroUpdaterMockRecorder struct {
	mock *MockKeroUpdater
}

// NewMockKeroUpdater creates a new mock instance.
func NewMockKeroUpdater(ctrl *gomock.Controller) *MockKeroUpdater {
	mock := &MockKeroUpdater{ctrl: ctrl}
	mock.recorder = &MockKeroUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeroUpdater) EXPECT() *MockKeroUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockKeroUpdater) Update(ctx context.Context, k *entity.Kero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, k)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockKeroUpdaterMockRecorder) Update(ctx, k any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKeroUpdater)(nil).Update), ctx, k)
}

// MockKeroDeleter is a mock of KeroDeleter interface.
type MockKeroDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockKeroDeleterMockRecorder
	isgomock struct{}
}

// MockKeroDeleterMockRecorder is the mock recorder for MockKeroDeleter.
type MockKeroDeleterMockRecorder struct {
	mock *MockKeroDeleter
}

// NewMockKeroDeleter creates a new mock instance.
func NewMockKeroDeleter(ctrl *gomock.Controller) *MockKeroDeleter {
	mock := &MockKeroDeleter{ctrl: ctrl}
	mock.recorder = &MockKeroDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeroDeleter) EXPECT() *MockKeroDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKeroDeleter) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeroDeleterMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeroDeleter)(nil).Delete), ctx, id)
}
