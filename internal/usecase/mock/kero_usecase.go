// Code generated by MockGen. DO NOT EDIT.
// Source: kero_usecase.go
//
// Generated by this command:
//
//	mockgen -source=kero_usecase.go -destination=mock/kero_usecase.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/kaerubo/kaeruashi/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockKeroCreator is a mock of KeroCreator interface.
type MockKeroCreator struct {
	ctrl     *gomock.Controller
	recorder *MockKeroCreatorMockRecorder
	isgomock struct{}
}

// MockKeroCreatorMockRecorder is the mock recorder for MockKeroCreator.
type MockKeroCreatorMockRecorder struct {
	mock *MockKeroCreator
}

// NewMockKeroCreator creates a new mock instance.
func NewMockKeroCreator(ctrl *gomock.Controller) *MockKeroCreator {
	mock := &MockKeroCreator{ctrl: ctrl}
	mock.recorder = &MockKeroCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeroCreator) EXPECT() *MockKeroCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockKeroCreator) Create(ctx context.Context, k *entity.Kero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, k)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockKeroCreatorMockRecorder) Create(ctx, k any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKeroCreator)(nil).Create), ctx, k)
}

// MockKeroByIDFinder is a mock of KeroByIDFinder interface.
type MockKeroByIDFinder struct {
	ctrl     *gomock.Controller
	recorder *MockKeroByIDFinderMockRecorder
	isgomock struct{}
}

// MockKeroByIDFinderMockRecorder is the mock recorder for MockKeroByIDFinder.
type MockKeroByIDFinderMockRecorder struct {
	mock *MockKeroByIDFinder
}

// NewMockKeroByIDFinder creates a new mock instance.
func NewMockKeroByIDFinder(ctrl *gomock.Controller) *MockKeroByIDFinder {
	mock := &MockKeroByIDFinder{ctrl: ctrl}
	mock.recorder = &MockKeroByIDFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeroByIDFinder) EXPECT() *MockKeroByIDFinderMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockKeroByIDFinder) FindByID(ctx context.Context, id string) (*entity.Kero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.Kero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockKeroByIDFinderMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockKeroByIDFinder)(nil).FindByID), ctx, id)
}

// MockKeroLister is a mock of KeroLister interface.
type MockKeroLister struct {
	ctrl     *gomock.Controller
	recorder *MockKeroListerMockRecorder
	isgomock struct{}
}

// MockKeroListerMockRecorder is the mock recorder for MockKeroLister.
type MockKeroListerMockRecorder struct {
	mock *MockKeroLister
}

// NewMockKeroLister creates a new mock instance.
func NewMockKeroLister(ctrl *gomock.Controller) *MockKeroLister {
	mock := &MockKeroLister{ctrl: ctrl}
	mock.recorder = &MockKeroListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeroLister) EXPECT() *MockKeroListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockKeroLister) List(ctx context.Context) ([]*entity.Kero, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*entity.Kero)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockKeroListerMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKeroLister)(nil).List), ctx)
}

// MockKeroUpdater is a mock of KeroUpdater interface.
type MockKeroUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockKeroUpdaterMockRecorder
	isgomock struct{}
}

// MockKeroUpdaterMockRecorder is the mock recorder for MockKeroUpdater.
type MockKeroUpdaterMockRecorder struct {
	mock *MockKeroUpdater
}

// NewMockKeroUpdater creates a new mock instance.
func NewMockKeroUpdater(ctrl *gomock.Controller) *MockKeroUpdater {
	mock := &MockKeroUpdater{ctrl: ctrl}
	mock.recorder = &MockKeroUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeroUpdater) EXPECT() *MockKeroUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockKeroUpdater) Update(ctx context.Context, k *entity.Kero) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, k)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockKeroUpdaterMockRecorder) Update(ctx, k any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKeroUpdater)(nil).Update), ctx, k)
}

// MockKeroDeleter is a mock of KeroDeleter interface.
type MockKeroDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockKeroDeleterMockRecorder
	isgomock struct{}
}

// MockKeroDeleterMockRecorder is the mock recorder for MockKeroDeleter.
type MockKeroDeleterMockRecorder struct {
	mock *MockKeroDeleter
}

// NewMockKeroDeleter creates a new mock instance.
func NewMockKeroDeleter(ctrl *gomock.Controller) *MockKeroDeleter {
	mock := &MockKeroDeleter{ctrl: ctrl}
	mock.recorder = &MockKeroDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeroDeleter) EXPECT() *MockKeroDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKeroDeleter) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeroDeleterMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeroDeleter)(nil).Delete), ctx, id)
}
